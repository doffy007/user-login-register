// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	request "github.com/doffy007/user-login-register/internal/request"
	response "github.com/doffy007/user-login-register/internal/response"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// UserLogin provides a mock function with given fields: _a0
func (_m *UserUsecase) UserLogin(_a0 request.ParamUserLogin) (bool, response.BaseResponse) {
	ret := _m.Called(_a0)

	var r0 bool
	var r1 response.BaseResponse
	if rf, ok := ret.Get(0).(func(request.ParamUserLogin) (bool, response.BaseResponse)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(request.ParamUserLogin) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(request.ParamUserLogin) response.BaseResponse); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(response.BaseResponse)
	}

	return r0, r1
}

// UserRegister provides a mock function with given fields: _a0
func (_m *UserUsecase) UserRegister(_a0 request.ParamUserRegister) (bool, response.BaseResponse) {
	ret := _m.Called(_a0)

	var r0 bool
	var r1 response.BaseResponse
	if rf, ok := ret.Get(0).(func(request.ParamUserRegister) (bool, response.BaseResponse)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(request.ParamUserRegister) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(request.ParamUserRegister) response.BaseResponse); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(response.BaseResponse)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
